<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
       "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wong.mybatis.dao.BlogMapper">
	<!-- 
	===============================================
	什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句
	所谓的动态SQL，本质上还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码 
	动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了
	建议：
    先在Mysql中写出完整的SQL，再对应的去修改成我们的动态SQL实现通用即
	================================================
	-->
	<insert id="addBlog" parameterType="com.wong.mybatis.pojo.Blog">
		 insert into mybatis.blog (id, title, author, create_time, views)
  		  values (#{id},#{title},#{author},#{createTime},#{views});
	</insert>
	<!--需求1：
	根据作者名字和博客名字来查询博客！
	如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询
	select * from blog where title = #{title} and author = #{author}
	-->
	<!-- 
	SQL片段:
	有时候可能某个 sql 语句我们用的特别多，
	为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。
	注意事项：
		①、最好基于 单表来定义 sql 片段，提高片段的可重用性
		②、在 sql 片段中不要包括 where
	 -->
	 <sql id="if-title-author">
	 	<if test="title != null">
	      title = #{title}
	   </if>
	   <if test="author != null">
	      and author = #{author}
	   </if>
	 </sql>
	 
	<select id="queryBlogIf" parameterType="map" resultType="com.wong.mybatis.pojo.Blog">
	  	<!-- 
	  		select * from mybatis.blog where 1=1
		   <if test="title != null">
		      and title = #{title}
		   </if>
		   <if test="author != null">
		      and author = #{author}
		   </if>
	  	 -->
	  	 select * from mybatis.blog
		<where>
			<!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace -->
	       <include refid="if-title-author"></include>
	       <!-- 在这里还可以引用其他的 sql 片段 -->
		</where>
	</select>
			<!-- 
				这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。
				此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。
			 -->
	
<!-- ============  select * from blog WHERE author = ? ================================ -->
	<select id="queryBlogChoose" parameterType="map" resultType="com.wong.mybatis.pojo.Blog">
	  select * from blog
	   <where>
	   <!-- 
	   	有时候，我们不想用到所有的查询条件，只想选择其中的一个，
	   	查询条件有一个满足即可，使用 choose 标签可以解决此类问题，
	   	类似于 Java 的 switch 语句
	    -->
	       <choose>
	           <when test="title != null">
	                title = #{title}
	           </when>
	           <when test="author != null">
	              and author = #{author}
	           </when>
	           <otherwise>
	              and views = #{views}
	           </otherwise>
	       </choose>
	   </where>
	</select>
	
<!-- =============== update blog SET title = ?, author = ? where id = ?; ========================== -->

	<!--注意set是用的逗号隔开-->
	<update id="updateBlog" parameterType="map">
	  	update blog
		 <set>
	         <if test="title != null">
	            title = #{title},
	         </if>
	         <if test="author != null">
	            author = #{author}
	         </if>
	     </set>
	 	where id = #{id};
	</update>
	<!-- 
		set 元素可以用于动态包含需要更新的列，忽略其它不更新的列
		set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）
	 -->

<!-- ======= select * from mybatis.blog where 1=1 and(id=1 or id=2 or id=3);===================================== -->
	<!-- 我們可以傳遞一個萬能 map ，讓 map 中可以存一個集合 -->
	<select id="queryBlogForeach" parameterType="map" resultType="com.wong.mybatis.pojo.Blog">
		select * from mybatis.blog
		<where>
			<!-- 傳入型態="map" ，遍歷其中 key 為 ids 的集合(list) -->
			<foreach collection="ids" item="id" open="and (" close=")" separator="or">
				id=#{id}
			</foreach>
			<!--
	       collection:指定输入对象中的集合属性
	       item:每次遍历生成的对象
	       open:开始遍历时的拼接字符串
	       close:结束时拼接的字符串
	       separator:遍历对象之间需要拼接的字符串
	       select * from blog where 1=1 and (id=1 or id=2 or id=3)
	     -->
		</where>
	</select>
</mapper>